{
  "examples": [
    {
      "id": "cloudflare-pages",
      "title": "Cloudflare Pages Deployment",
      "description": "Python script to deploy websites to Cloudflare Pages",
      "language": "python",
      "icon": "‚òÅÔ∏è",
      "tags": ["deployment", "cloudflare", "automation", "web"],
      "code": "import requests\nimport os\nimport json\nimport time\n\n# Cloudflare API credentials\nAPI_TOKEN = \"zhPKMptLhq5YT1SkQNg7XrMv7pcgYk9ze9xOwf-A\"\nACCOUNT_ID = \"d7e25ac751280db2c1ce8e59731f0194\"\nPROJECT_NAME = \"florist-elegant-landing\"  # Made up project name as requested\n\n# API endpoint\nBASE_URL = f\"https://api.cloudflare.com/client/v4/accounts/{ACCOUNT_ID}/pages/projects/{PROJECT_NAME}\"\n\n# Headers for API requests\nheaders = {\n    \"Authorization\": f\"Bearer {API_TOKEN}\",\n    \"Content-Type\": \"application/json\"\n}\n\ndef check_project_exists():\n    \"\"\"Check if the project exists on Cloudflare\"\"\"\n    response = requests.get(BASE_URL, headers=headers)\n    if response.status_code == 200:\n        print(f\"Project '{PROJECT_NAME}' found.\")\n        return True\n    elif response.status_code == 404:\n        print(f\"Project '{PROJECT_NAME}' not found. Creating a new project...\")\n        return create_project()\n    else:\n        print(f\"Error checking project: {response.status_code} - {response.text}\")\n        return False\n\ndef create_project():\n    \"\"\"Create a new project on Cloudflare if it doesn't exist\"\"\"\n    create_url = f\"https://api.cloudflare.com/client/v4/accounts/{ACCOUNT_ID}/pages/projects\"\n    payload = {\n        \"name\": PROJECT_NAME,\n        \"build_config\": {\n            \"build_command\": \"\",\n            \"destination_dir\": \"\",\n            \"root_dir\": \"\"\n        },\n        \"source\": {\n            \"type\": \"upload\"\n        },\n        \"production_branch\": \"main\"\n    }\n    response = requests.post(create_url, headers=headers, json=payload)\n    if response.status_code == 200:\n        print(f\"Project '{PROJECT_NAME}' created successfully.\")\n        return True\n    else:\n        print(f\"Error creating project: {response.status_code} - {response.text}\")\n        return False\n\ndef get_upload_url():\n    \"\"\"Get the upload URL for the project\"\"\"\n    upload_url = f\"{BASE_URL}/upload-token\"\n    response = requests.get(upload_url, headers=headers)\n    if response.status_code == 200:\n        data = response.json()\n        return data['result']['url']\n    else:\n        print(f\"Error getting upload URL: {response.status_code} - {response.text}\")\n        return None\n\ndef upload_files(upload_url):\n    \"\"\"Upload the contents of the cloudflare folder to the project using the upload URL\"\"\"\n    files = []\n    for filename in os.listdir(\"cloudflare\"):\n        file_path = os.path.join(\"cloudflare\", filename)\n        if os.path.isfile(file_path):\n            files.append(('file', (filename, open(file_path, 'rb'), 'application/octet-stream')))\n    \n    if not files:\n        print(\"No files found to upload.\")\n        return False\n    \n    # Use a different header for file upload without Content-Type: application/json\n    upload_headers = {\n        \"Authorization\": f\"Bearer {API_TOKEN}\"\n    }\n    \n    response = requests.post(upload_url, headers=upload_headers, files=files)\n    if response.status_code == 200 or response.status_code == 201:\n        print(\"Files uploaded successfully.\")\n        return True\n    else:\n        print(f\"Error uploading files: {response.status_code} - {response.text}\")\n        return False\n\ndef deploy_project():\n    \"\"\"Deploy the uploaded files to Cloudflare Pages\"\"\"\n    deploy_url = f\"{BASE_URL}/deployments\"\n    payload = {\n        \"branch\": \"main\",\n        \"commit_message\": \"Deploy florist landing page with newsletter popup\"\n    }\n    response = requests.post(deploy_url, headers=headers, json=payload)\n    if response.status_code == 200:\n        deployment_data = response.json()\n        deployment_id = deployment_data['result']['id']\n        print(f\"Deployment started with ID: {deployment_id}\")\n        return deployment_id\n    else:\n        print(f\"Error starting deployment: {response.status_code} - {response.text}\")\n        return None\n\ndef check_deployment_status(deployment_id):\n    \"\"\"Check the status of the deployment\"\"\"\n    status_url = f\"{BASE_URL}/deployments/{deployment_id}\"\n    for _ in range(10):  # Check up to 10 times with delay\n        response = requests.get(status_url, headers=headers)\n        if response.status_code == 200:\n            data = response.json()\n            status = data['result']['status']\n            print(f\"Deployment status: {status}\")\n            if status == \"success\":\n                print(\"Deployment completed successfully!\")\n                return True\n            elif status == \"failed\":\n                print(\"Deployment failed.\")\n                return False\n        else:\n            print(f\"Error checking deployment status: {response.status_code} - {response.text}\")\n            return False\n        time.sleep(10)  # Wait 10 seconds before checking again\n    print(\"Deployment still in progress after maximum checks. Check Cloudflare dashboard for final status.\")\n    return None\n\ndef main():\n    print(\"Starting Cloudflare deployment process...\")\n    \n    # Step 1: Check if project exists or create it\n    if not check_project_exists():\n        print(\"Failed to proceed with project setup.\")\n        return\n    \n    # Step 2: Get upload URL\n    upload_url = get_upload_url()\n    if not upload_url:\n        print(\"Failed to get upload URL.\")\n        return\n    \n    # Step 3: Upload files\n    if not upload_files(upload_url):\n        print(\"Failed to upload files.\")\n        return\n    \n    # Step 4: Deploy the project\n    deployment_id = deploy_project()\n    if not deployment_id:\n        print(\"Failed to start deployment.\")\n        return\n    \n    # Step 5: Check deployment status\n    print(\"Checking deployment status...\")\n    status = check_deployment_status(deployment_id)\n    if status is True:\n        print(f\"Deployment successful! Your site should be live at: https://{PROJECT_NAME}.pages.dev\")\n    elif status is False:\n        print(\"Deployment failed. Please check Cloudflare dashboard for details.\")\n    else:\n        print(\"Deployment still in progress. It may take a few minutes to complete. Check Cloudflare dashboard for updates.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "id": "openai-api",
      "title": "OpenAI API Integration",
      "description": "Python script to interact with OpenAI's API for AI text generation",
      "language": "python",
      "icon": "üß†",
      "tags": ["AI", "NLP", "API", "text generation"],
      "code": "import os\nimport openai\nimport json\n\n# Set your API key\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\n\ndef generate_response(prompt, model=\"gpt-3.5-turbo\", max_tokens=500):\n    \"\"\"Generate a response using OpenAI's API.\"\"\"\n    try:\n        response = openai.ChatCompletion.create(\n            model=model,\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                {\"role\": \"user\", \"content\": prompt}\n            ],\n            max_tokens=max_tokens,\n            temperature=0.7,\n        )\n        return response.choices[0].message.content\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\ndef analyze_sentiment(text):\n    \"\"\"Analyze sentiment of text using OpenAI API.\"\"\"\n    prompt = f\"Analyze the sentiment of the following text as positive, negative, or neutral. Then provide a score from -1.0 (very negative) to 1.0 (very positive). Respond in JSON format with keys 'sentiment' and 'score'.\\n\\nText: {text}\"\n    \n    try:\n        response = generate_response(prompt)\n        try:\n            # Try to parse the response as JSON\n            return json.loads(response)\n        except:\n            # Return the raw response if it's not valid JSON\n            return {\"raw_response\": response}\n    except Exception as e:\n        return {\"error\": str(e)}\n\ndef summarize_text(text, max_words=100):\n    \"\"\"Summarize text using OpenAI API.\"\"\"\n    prompt = f\"Summarize the following text in under {max_words} words:\\n\\n{text}\"\n    return generate_response(prompt)\n\ndef translate_text(text, target_language=\"Spanish\"):\n    \"\"\"Translate text to target language using OpenAI API.\"\"\"\n    prompt = f\"Translate the following text to {target_language}:\\n\\n{text}\"\n    return generate_response(prompt)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test sentiment analysis\n    sample_text = \"I absolutely loved the new movie! The characters were well-developed and the plot was engaging.\"\n    sentiment_result = analyze_sentiment(sample_text)\n    print(\"Sentiment Analysis:\", sentiment_result)\n    \n    # Test summarization\n    long_text = \"\"\"\n    The rapid advancement of artificial intelligence technologies has sparked discussions across various sectors. \n    These technologies offer significant benefits for productivity, healthcare, education, and scientific discovery. \n    However, they also raise concerns about job displacement, privacy, security, and ethical considerations. \n    Policymakers, industry leaders, and researchers are working to establish guidelines that maximize benefits \n    while minimizing potential harms. The future landscape of AI will likely be shaped by ongoing collaboration \n    between these stakeholders to ensure responsible development and implementation.\n    \"\"\"\n    summary = summarize_text(long_text)\n    print(\"\\nSummarized Text:\", summary)\n    \n    # Test translation\n    translation = translate_text(\"Hello world! How are you today?\", \"French\")\n    print(\"\\nTranslated Text:\", translation)"
    },
    {
      "id": "github-api",
      "title": "GitHub API Integration",
      "description": "Python script to interact with GitHub's API for managing repositories",
      "language": "python",
      "icon": "üì¶",
      "tags": ["GitHub", "API", "version control", "automation"],
      "code": "import requests\nimport os\nimport base64\nfrom datetime import datetime\nimport time\n\n# Set your GitHub personal access token\nGITHUB_TOKEN = os.environ.get(\"GITHUB_TOKEN\")\n\nclass GitHubAPI:\n    def __init__(self, token):\n        self.token = token\n        self.base_url = \"https://api.github.com\"\n        self.headers = {\n            \"Authorization\": f\"token {token}\",\n            \"Accept\": \"application/vnd.github.v3+json\"\n        }\n        self.rate_limit_remaining = None\n    \n    def _handle_rate_limiting(self, response):\n        \"\"\"Handle GitHub API rate limiting.\"\"\"\n        self.rate_limit_remaining = int(response.headers.get('X-RateLimit-Remaining', 0))\n        if response.status_code == 403 and self.rate_limit_remaining == 0:\n            reset_time = int(response.headers.get('X-RateLimit-Reset', 0))\n            sleep_time = max(0, reset_time - int(time.time())) + 1\n            print(f\"Rate limit exceeded. Waiting for {sleep_time} seconds...\")\n            time.sleep(sleep_time)\n            return True\n        return False\n    \n    def make_request(self, method, endpoint, params=None, data=None, retry=True):\n        \"\"\"Make a request to the GitHub API with rate limit handling.\"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        \n        try:\n            response = requests.request(\n                method=method,\n                url=url,\n                headers=self.headers,\n                params=params,\n                json=data\n            )\n            \n            if retry and self._handle_rate_limiting(response):\n                return self.make_request(method, endpoint, params, data, retry=False)\n            \n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            print(f\"Error making request: {str(e)}\")\n            return None\n    \n    def get_user_repos(self, username, per_page=30):\n        \"\"\"Get public repositories for a user.\"\"\"\n        return self.make_request(\"GET\", f\"/users/{username}/repos\", params={\"per_page\": per_page})\n    \n    def get_file_content(self, owner, repo, path):\n        \"\"\"Get content of a specific file in a repository.\"\"\"\n        content_data = self.get_repo_contents(owner, repo, path)\n        if content_data and \"content\" in content_data:\n            return base64.b64decode(content_data[\"content\"]).decode(\"utf-8\")\n        return None\n    \n    def create_repo(self, name, description=None, private=False):\n        \"\"\"Create a new repository for the authenticated user.\"\"\"\n        data = {\n            \"name\": name,\n            \"private\": private\n        }\n        if description:\n            data[\"description\"] = description\n        \n        return self.make_request(\"POST\", \"/user/repos\", data=data)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Initialize the GitHub API client\n    if not GITHUB_TOKEN:\n        print(\"Please set the GITHUB_TOKEN environment variable.\")\n        exit(1)\n    \n    github = GitHubAPI(GITHUB_TOKEN)\n    \n    # Get repositories for a user\n    username = \"octocat\"\n    repos = github.get_user_repos(username, per_page=5)\n    if repos:\n        print(f\"\\nRepositories for {username}:\")\n        for repo in repos:\n            print(f\"- {repo['name']}: {repo['description'] or 'No description'}\")    "
    },
    {
      "id": "twitter-analyzer",
      "title": "Twitter Data Analysis",
      "description": "Python script to analyze Twitter data and generate insights",
      "language": "python",
      "icon": "üìä",
      "tags": ["Twitter", "API", "data analysis", "visualization"],
      "code": "import tweepy\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport re\nfrom collections import Counter\nimport nltk\nfrom nltk.corpus import stopwords\n\n# Twitter API credentials\nTWITTER_API_KEY = os.environ.get(\"TWITTER_API_KEY\")\nTWITTER_API_SECRET = os.environ.get(\"TWITTER_API_SECRET\")\nTWITTER_ACCESS_TOKEN = os.environ.get(\"TWITTER_ACCESS_TOKEN\")\nTWITTER_ACCESS_SECRET = os.environ.get(\"TWITTER_ACCESS_SECRET\")\nTWITTER_BEARER_TOKEN = os.environ.get(\"TWITTER_BEARER_TOKEN\")\n\nclass TwitterAnalyzer:\n    def __init__(self, api_key, api_secret, access_token, access_secret, bearer_token):\n        \"\"\"Initialize the Twitter API client.\"\"\"\n        self.client = tweepy.Client(\n            bearer_token=bearer_token,\n            consumer_key=api_key,\n            consumer_secret=api_secret,\n            access_token=access_token,\n            access_token_secret=access_secret\n        )\n        self.stopwords = set(stopwords.words('english'))\n        self.stopwords.update(['https', 'co', 'rt', 'amp'])\n    \n    def search_tweets(self, query, max_results=100, start_time=None, end_time=None):\n        \"\"\"Search for tweets matching a query.\"\"\"\n        # Format dates if provided\n        if isinstance(start_time, datetime):\n            start_time = start_time.isoformat()\n        if isinstance(end_time, datetime):\n            end_time = end_time.isoformat()\n            \n        # Perform the search\n        tweets = self.client.search_recent_tweets(\n            query=query,\n            max_results=max_results,\n            tweet_fields=['created_at', 'public_metrics', 'author_id', 'lang'],\n            user_fields=['username', 'name', 'location', 'verified'],\n            expansions=['author_id'],\n            start_time=start_time,\n            end_time=end_time\n        )\n        \n        # Process results\n        users = {user.id: user for user in tweets.includes['users']} if 'users' in tweets.includes else {}\n        \n        results = []\n        for tweet in tweets.data:\n            user = users.get(tweet.author_id)\n            results.append({\n                'id': tweet.id,\n                'text': tweet.text,\n                'created_at': tweet.created_at,\n                'retweets': tweet.public_metrics['retweet_count'],\n                'likes': tweet.public_metrics['like_count'],\n                'username': user.username if user else None\n            })\n        \n        return pd.DataFrame(results)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Initialize the Twitter analyzer\n    twitter = TwitterAnalyzer(\n        TWITTER_API_KEY,\n        TWITTER_API_SECRET,\n        TWITTER_ACCESS_TOKEN,\n        TWITTER_ACCESS_SECRET,\n        TWITTER_BEARER_TOKEN\n    )\n    \n    # Example: Search for tweets about a topic\n    one_week_ago = datetime.now() - timedelta(days=7)\n    tweets_df = twitter.search_tweets(\n        query=\"artificial intelligence -is:retweet\",\n        max_results=100,\n        start_time=one_week_ago\n    )\n    \n    if not tweets_df.empty:\n        print(f\"Found {len(tweets_df)} tweets\")\n    else:\n        print(\"No tweets found.\")"
    }
  ]
}
